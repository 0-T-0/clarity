"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var datagrid_property_comparator_1 = require("./built-in/comparators/datagrid-property-comparator");
var datagrid_property_string_filter_1 = require("./built-in/filters/datagrid-property-string-filter");
var datagrid_string_filter_1 = require("./built-in/filters/datagrid-string-filter");
var datagrid_items_1 = require("./datagrid-items");
var datagrid_row_1 = require("./datagrid-row");
var filters_1 = require("./providers/filters");
var items_1 = require("./providers/items");
var page_1 = require("./providers/page");
var selection_1 = require("./providers/selection");
var sort_1 = require("./providers/sort");
var Datagrid = (function () {
    function Datagrid(selection, sort, filters, page, items) {
        this.selection = selection;
        this.sort = sort;
        this.filters = filters;
        this.page = page;
        this.items = items;
        /**
         * Freezes the datagrid while data is loading
         */
        this.loading = false;
        /**
         * Output emitted whenever the data needs to be refreshed, based on user action or external ones
         */
        this.refresh = new core_1.EventEmitter(false);
        this.selectedChanged = new core_1.EventEmitter(false);
        /**
         * Subscriptions to all the services changes
         */
        this._subscriptions = [];
    }
    /**
     * Emits a State output to ask for the data to be refreshed
     */
    Datagrid.prototype.triggerRefresh = function () {
        var state = {};
        if (this.page.size > 0) {
            state.page = {
                from: this.page.firstItem,
                to: this.page.lastItem,
                size: this.page.size
            };
        }
        if (this.sort.comparator) {
            if (this.sort.comparator instanceof datagrid_property_comparator_1.DatagridPropertyComparator) {
                /*
                 * Special case for the default object property comparator,
                 * we give the property name instead of the actual comparator.
                 */
                state.sort = {
                    by: this.sort.comparator.prop,
                    reverse: this.sort.reverse
                };
            }
            else {
                state.sort = {
                    by: this.sort.comparator,
                    reverse: this.sort.reverse
                };
            }
        }
        var activeFilters = this.filters.getActiveFilters();
        if (activeFilters.length > 0) {
            state.filters = [];
            for (var _i = 0, activeFilters_1 = activeFilters; _i < activeFilters_1.length; _i++) {
                var filter = activeFilters_1[_i];
                if (filter instanceof datagrid_string_filter_1.DatagridStringFilter) {
                    var stringFilter = filter.filter;
                    if (stringFilter instanceof datagrid_property_string_filter_1.DatagridPropertyStringFilter) {
                        /*
                         * Special case again for the default object property filter,
                         * we give the property name instead of the full filter object.
                         */
                        state.filters.push({
                            property: stringFilter.prop,
                            value: filter.value
                        });
                        continue;
                    }
                }
                state.filters.push(filter);
            }
        }
        this.refresh.emit(state);
    };
    Object.defineProperty(Datagrid.prototype, "selected", {
        /**
         * Array of all selected items
         */
        set: function (value) {
            if (value) {
                this.selection.selectable = true;
            }
            this.selection.current = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Datagrid.prototype, "allSelected", {
        /**
         * Indicates if all currently displayed items are selected
         */
        get: function () {
            return this.selection.isAllSelected();
        },
        /**
         * Selects/deselects all currently displayed items
         * @param value
         */
        set: function (value) {
            /*
             * This is a setter but we ignore the value.
             * It's strange, but it lets us have an indeterminate state where only
             * some of the items are selected.
             */
            this.selection.toggleAll();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Datagrid.prototype, "nbEmptyRows", {
        /**
         * Number of empty rows to display to ensure we preserve a fixed height on the datagrid,
         * even if the last page has less items than the previous ones
         */
        get: function () {
            console.log(this._rows.length);
            var rowsDisplayed = 0;
            if (this.items.displayed) {
                rowsDisplayed = this.items.displayed.length;
            }
            // Always leave space for at least 2 rows even if the datagrid isn't paginated
            return Math.max(this.page.size, 2) - rowsDisplayed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Our setup happens in the view of some of our components, so we wait for it to be done before starting
     */
    Datagrid.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.triggerRefresh();
        this._subscriptions.push(this.sort.change.subscribe(function () { return _this.triggerRefresh(); }));
        this._subscriptions.push(this.filters.change.subscribe(function () { return _this.triggerRefresh(); }));
        this._subscriptions.push(this.page.change.subscribe(function () { return _this.triggerRefresh(); }));
        this._subscriptions.push(this.selection.change.subscribe(function (s) { return _this.selectedChanged.emit(s); }));
        this._subscriptions.push(this._rows.changes.subscribe(function () {
            if (!_this.items.smart) {
                _this.items.all = _this._rows.map(function (row) { return row.item; });
            }
        }));
        if (!this.items.smart) {
            this.items.all = this._rows.map(function (row) { return row.item; });
        }
    };
    Datagrid.prototype.ngOnDestroy = function () {
        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    __decorate([
        core_1.Input("clrDgLoading"), 
        __metadata('design:type', Object)
    ], Datagrid.prototype, "loading", void 0);
    __decorate([
        core_1.Output("clrDgRefresh"), 
        __metadata('design:type', Object)
    ], Datagrid.prototype, "refresh", void 0);
    __decorate([
        core_1.ContentChild(datagrid_items_1.DatagridItems), 
        __metadata('design:type', datagrid_items_1.DatagridItems)
    ], Datagrid.prototype, "iterator", void 0);
    __decorate([
        core_1.ContentChildren(datagrid_row_1.DatagridRow), 
        __metadata('design:type', core_1.QueryList)
    ], Datagrid.prototype, "_rows", void 0);
    __decorate([
        core_1.Input("clrDgSelected"), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], Datagrid.prototype, "selected", null);
    __decorate([
        core_1.Output("clrDgSelectedChange"), 
        __metadata('design:type', Object)
    ], Datagrid.prototype, "selectedChanged", void 0);
    Datagrid = __decorate([
        core_1.Component({
            selector: "clr-datagrid",
            template: "\n      <div class=\"datagrid-wrapper\">\n          <div class=\"datagrid\">\n              <div class=\"datagrid-head\">\n                  <div class=\"datagrid-row\">\n                      <div class=\"datagrid-column datagrid-select\" *ngIf=\"selection.selectable\">\n                          <span class=\"datagrid-column-title\">\n                              <clr-checkbox [(ngModel)]=\"allSelected\"></clr-checkbox>\n                          </span>\n                      </div>\n                      <ng-content select=\"clr-dg-column\"></ng-content>\n                  </div>\n              </div>\n\n              <div class=\"datagrid-body\">\n                  <template *ngIf=\"iterator\"\n                            ngFor [ngForOf]=\"items.displayed\" [ngForTrackBy]=\"items.trackBy\"\n                            [ngForTemplate]=\"iterator.template\"></template>\n                  <ng-content *ngIf=\"!iterator\"></ng-content>\n              </div>\n          </div>\n          <!--\n              I hate doing this, with these 36px being baselineRem(1.5) hardcoded here,\n              but I don't see a better solution right now.\n          -->\n          <div class=\"datagrid-placeholder\" *ngIf=\"nbEmptyRows > 0\"\n               [style.height]=\"(36*nbEmptyRows)+'px'\"></div>\n          <!--\n              This is not inside the table because there is no good way of having a single column span\n              everything when using custom elements with display:table-cell.\n          -->\n          <ng-content select=\"clr-dg-footer\"></ng-content>\n\n          <div class=\"datagrid-spinner\" *ngIf=\"loading\">\n              <div class=\"spinner\">Loading...</div>\n          </div>\n      </div>\n    ",
            providers: [selection_1.Selection, sort_1.Sort, filters_1.Filters, page_1.Page, items_1.Items]
        }), 
        __metadata('design:paramtypes', [selection_1.Selection, sort_1.Sort, filters_1.Filters, page_1.Page, items_1.Items])
    ], Datagrid);
    return Datagrid;
}());
exports.Datagrid = Datagrid;
