import { AfterViewInit, OnDestroy, EventEmitter } from "@angular/core";
import { DatagridItems } from "./datagrid-items";
import { State } from "./interfaces/state";
import { Filters } from "./providers/filters";
import { Items } from "./providers/items";
import { Page } from "./providers/page";
import { Selection } from "./providers/selection";
import { Sort } from "./providers/sort";
export declare class Datagrid implements AfterViewInit, OnDestroy {
    private selection;
    private sort;
    private filters;
    private page;
    items: Items;
    constructor(selection: Selection, sort: Sort, filters: Filters, page: Page, items: Items);
    /**
     * Freezes the datagrid while data is loading
     */
    loading: boolean;
    /**
     * Output emitted whenever the data needs to be refreshed, based on user action or external ones
     */
    refresh: EventEmitter<State>;
    /**
     * Emits a State output to ask for the data to be refreshed
     */
    private triggerRefresh();
    /**
     * We grab the smart iterator from projected content
     */
    iterator: DatagridItems;
    /**
     * When the datagrid is user-managed without the smart iterator, we get the items displayed
     * by querying the projected content. This is needed to keep track of the models currently
     * displayed, typically for selection.
     */
    private _rows;
    /**
     * Array of all selected items
     */
    selected: any[];
    selectedChanged: EventEmitter<any[]>;
    /**
     * Indicates if all currently displayed items are selected
     */
    /**
     * Selects/deselects all currently displayed items
     * @param value
     */
    allSelected: boolean;
    /**
     * Number of empty rows to display to ensure we preserve a fixed height on the datagrid,
     * even if the last page has less items than the previous ones
     */
    readonly nbEmptyRows: number;
    /**
     * Our setup happens in the view of some of our components, so we wait for it to be done before starting
     */
    ngAfterViewInit(): void;
    /**
     * Subscriptions to all the services changes
     */
    private _subscriptions;
    ngOnDestroy(): void;
}
