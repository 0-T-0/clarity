"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var page_1 = require("./providers/page");
var DatagridPagination = (function () {
    function DatagridPagination(page) {
        var _this = this;
        this.page = page;
        this.currentChanged = new core_1.EventEmitter(false);
        /*
         * Default page size is 10.
         * The reason we set it in this constructor and not in the provider itself is because
         * we don't want pagination (page size 0) if this component isn't present in the datagrid.
         */
        page.size = 10;
        this._pageSubscription = page.change.subscribe(function (current) { return _this.currentChanged.emit(current); });
    }
    DatagridPagination.prototype.ngOnDestroy = function () {
        this._pageSubscription.unsubscribe();
    };
    Object.defineProperty(DatagridPagination.prototype, "pageSize", {
        /**
         * Page size
         */
        get: function () {
            return this.page.size;
        },
        set: function (size) {
            if (typeof size === "number") {
                this.page.size = size;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "totalItems", {
        /**
         * Total items (needed to guess the last page)
         */
        get: function () {
            return this.page.totalItems;
        },
        set: function (total) {
            if (typeof total === "number") {
                this.page.totalItems = total;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "lastPage", {
        /**
         * Last page
         */
        get: function () {
            return this.page.last;
        },
        set: function (last) {
            if (typeof last === "number") {
                this.page.last = last;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "currentPage", {
        /**
         * Current page
         */
        get: function () {
            return this.page.current;
        },
        set: function (page) {
            if (typeof page === "number") {
                this.page.current = page;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Moves to the previous page if it exists
     */
    DatagridPagination.prototype.previous = function () {
        this.page.previous();
    };
    /**
     * Moves to the next page if it exists
     */
    DatagridPagination.prototype.next = function () {
        this.page.next();
    };
    Object.defineProperty(DatagridPagination.prototype, "firstItem", {
        /**
         * Index of the first item displayed on the current page, starting at 0
         */
        get: function () {
            return this.page.firstItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "lastItem", {
        /**
         * Index of the last item displayed on the current page, starting at 0
         */
        get: function () {
            return this.page.lastItem;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input("clrDgPageSize"), 
        __metadata('design:type', Number)
    ], DatagridPagination.prototype, "pageSize", null);
    __decorate([
        core_1.Input("clrDgTotalItems"), 
        __metadata('design:type', Number)
    ], DatagridPagination.prototype, "totalItems", null);
    __decorate([
        core_1.Input("clrDgLastPage"), 
        __metadata('design:type', Number)
    ], DatagridPagination.prototype, "lastPage", null);
    __decorate([
        core_1.Input("clrDgPage"), 
        __metadata('design:type', Number)
    ], DatagridPagination.prototype, "currentPage", null);
    __decorate([
        core_1.Output("clrDgPageChange"), 
        __metadata('design:type', Object)
    ], DatagridPagination.prototype, "currentChanged", void 0);
    DatagridPagination = __decorate([
        core_1.Component({
            selector: "clr-dg-pagination",
            template: "\n        <ul class=\"pagination\" *ngIf=\"page.last > 1\">\n            <li *ngIf=\"page.current > 1\">\n                <button class=\"pagination-previous\" (click)=\"page.previous()\"></button>\n            </li>\n            <li *ngIf=\"page.current > 2\">\n                <button (click)=\"page.current = 1\">1</button>\n            </li>\n            <li *ngIf=\"page.current > 3\">...</li>\n            <li *ngIf=\"page.current > 1\">\n                <button (click)=\"page.previous()\">{{page.current - 1}}</button>\n            </li>\n            <li class=\"pagination-current\">{{page.current}}</li>\n            <li *ngIf=\"page.current < page.last\">\n                <button (click)=\"page.next()\">{{page.current + 1}}</button>\n            </li>\n            <li *ngIf=\"page.current < page.last - 2\">...</li>\n            <li *ngIf=\"page.current < page.last - 1\">\n                <button (click)=\"page.current = page.last\">{{page.last}}</button>\n            </li>\n            <li *ngIf=\"page.current < page.last\">\n                <button class=\"pagination-next\" (click)=\"page.next()\"></button>\n            </li>\n        </ul>\n    ",
        }), 
        __metadata('design:paramtypes', [page_1.Page])
    ], DatagridPagination);
    return DatagridPagination;
}());
exports.DatagridPagination = DatagridPagination;
