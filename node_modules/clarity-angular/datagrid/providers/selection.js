"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var items_1 = require("./items");
var Selection = (function () {
    function Selection(_items) {
        var _this = this;
        this._items = _items;
        /**
         * Indicates if the datagrid's rows are selectable
         */
        this._selectable = false;
        /**
         * The Observable that lets other classes subscribe to selection changes
         */
        this._change = new rxjs_1.Subject();
        this._itemsSub = _items.change.subscribe(function () {
            if (!_this._selectable) {
                return;
            }
            /* TODO */
            _this.current.length = 0;
            _this.emitChange();
        });
    }
    /**
     * Cleans up our subscriptions to other providers
     */
    Selection.prototype.destroy = function () {
        this._itemsSub.unsubscribe();
    };
    Object.defineProperty(Selection.prototype, "selectable", {
        get: function () {
            return this._selectable;
        },
        set: function (value) {
            this._selectable = value;
            if (!value) {
                delete this.current;
            }
            else if (!this.current) {
                this.current = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "current", {
        get: function () {
            return this._current;
        },
        set: function (value) {
            this._current = value;
            this.emitChange();
        },
        enumerable: true,
        configurable: true
    });
    Selection.prototype.emitChange = function () {
        this._change.next(this.current);
    };
    Object.defineProperty(Selection.prototype, "change", {
        // We do not want to expose the Subject itself, but the Observable which is read-only
        get: function () {
            return this._change.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * Checks if an item is currently selected
     */
    Selection.prototype.isSelected = function (item) {
        return this._selectable && this.current.indexOf(item) >= 0;
    };
    /**
     * Selects or deselects an item
     */
    Selection.prototype.setSelected = function (item, selected) {
        if (!this._selectable) {
            return;
        }
        var index = this.current.indexOf(item);
        if (index >= 0 && !selected) {
            this.current.splice(index, 1);
            this.emitChange();
        }
        else if (index < 0 && selected) {
            this.current.push(item);
            this.emitChange();
        }
    };
    /**
     * Checks if all currently displayed items are selected
     */
    Selection.prototype.isAllSelected = function () {
        if (!this._selectable || !this._items.displayed) {
            return false;
        }
        var nbDisplayed = this._items.displayed.length;
        return nbDisplayed > 0 && this.current.length === nbDisplayed;
    };
    /**
     * Selects or deselects all currently displayed items
     */
    Selection.prototype.toggleAll = function () {
        var _this = this;
        if (!this._selectable) {
            return;
        }
        /*
         * If everything is already selected, we clear.
         * If at least one row isn't selected, we select everything.
         */
        if (this.isAllSelected()) {
            this.current.length = 0;
        }
        else {
            this._items.displayed.forEach(function (item) {
                if (_this.current.indexOf(item) < 0) {
                    _this.current.push(item);
                }
            });
        }
        this.emitChange();
    };
    Selection = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [items_1.Items])
    ], Selection);
    return Selection;
}());
exports.Selection = Selection;
