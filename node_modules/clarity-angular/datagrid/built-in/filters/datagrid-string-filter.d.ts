import { Renderer, ChangeDetectorRef, AfterViewInit } from "@angular/core";
import { Observable } from "rxjs";
import { Filter } from "../../interfaces/filter";
import { StringFilter } from "../../interfaces/string-filter";
import { CustomFilter } from "../../providers/custom-filter";
export declare class DatagridStringFilter implements CustomFilter, Filter<any>, AfterViewInit {
    private renderer;
    private _cdr;
    constructor(renderer: Renderer, _cdr: ChangeDetectorRef);
    /**
     * Customizable filter logic based on a search text
     */
    filter: StringFilter<any>;
    /**
     * Indicates if the filter dropdown is open
     */
    open: boolean;
    /**
     * We need the actual input element to automatically focus on it
     */
    private input;
    /**
     * We grab the DatagridFilter we wrap to register this StringFilter to it.
     */
    private filterContainer;
    ngAfterViewInit(): void;
    /**
     * The Observable required as part of the Filter interface
     */
    private _changes;
    readonly changes: Observable<string>;
    /**
     * Raw input value
     */
    private _rawValue;
    /**
     * Common setter for the input value
     */
    value: string;
    /**
     * Input value converted to lowercase
     */
    private _lowerCaseValue;
    readonly lowerCaseValue: string;
    /**
     * Indicates if the filter is currently active, meaning the input is not empty
     */
    isActive(): boolean;
    /**
     * Tests if an item matches a search text
     */
    accepts(item: any): boolean;
    /**
     * Closes the container and applies the filter
     */
    closeContainer(): void;
}
