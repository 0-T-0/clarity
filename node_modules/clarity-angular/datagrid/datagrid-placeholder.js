"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var core_1 = require("@angular/core");
var items_1 = require("./providers/items");
var page_1 = require("./providers/page");
var DatagridPlaceholder = (function () {
    function DatagridPlaceholder(items, page) {
        this.items = items;
        this.page = page;
    }
    Object.defineProperty(DatagridPlaceholder.prototype, "emptyDatagrid", {
        /**
         * Tests if the datagrid is empty, meaning it doesn't contain any items
         */
        get: function () {
            return !this.items.loading && (!this.items.displayed || this.items.displayed.length === 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPlaceholder.prototype, "nbEmptyRows", {
        /**
         * Number of empty rows to display to ensure we preserve a fixed height on the datagrid,
         * even if the last page has less items than the previous ones
         */
        get: function () {
            var rowsDisplayed = 0;
            if (this.items.displayed) {
                rowsDisplayed = this.items.displayed.length;
            }
            // Always leave space for at least 2 rows even if the datagrid isn't paginated
            return Math.max(this.page.size, 2) - rowsDisplayed;
        },
        enumerable: true,
        configurable: true
    });
    DatagridPlaceholder = __decorate([
        core_1.Component({
            selector: "clr-dg-placeholder",
            template: "\n        <!--\n            I hate doing this, with these 36px being baselineRem(1.5) hardcoded here,\n            but I don't see a better solution right now.\n        -->\n        <div class=\"datagrid-placeholder\" [style.min-height]=\"(36*nbEmptyRows)+'px'\"\n            *ngIf=\"nbEmptyRows > 0\" [class.datagrid-empty]=\"emptyDatagrid\">\n            <div class=\"datagrid-placeholder-image\" *ngIf=\"emptyDatagrid\"></div>\n            <ng-content *ngIf=\"emptyDatagrid\"></ng-content>\n        </div>\n    ",
            styles: [":host { display: block; }"]
        }), 
        __metadata('design:paramtypes', [items_1.Items, page_1.Page])
    ], DatagridPlaceholder);
    return DatagridPlaceholder;
}());
exports.DatagridPlaceholder = DatagridPlaceholder;
