"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var dropdown_1 = require("./dropdown");
var DropdownItem = (function () {
    function DropdownItem(_dropdown, el) {
        this._dropdown = _dropdown;
        this.el = el;
    }
    DropdownItem.prototype.onDropdownItemClick = function () {
        if (this._dropdown.isMenuClosable && !this.el.nativeElement.classList.contains("disabled")) {
            this._dropdown.toggleDropdown();
        }
    };
    __decorate([
        core_1.HostListener("click"), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], DropdownItem.prototype, "onDropdownItemClick", null);
    DropdownItem = __decorate([
        core_1.Directive({
            selector: "[clrDropdownItem]",
            host: {
                "[class.dropdown-item]": "true"
            }
        }), 
        __metadata('design:paramtypes', [dropdown_1.Dropdown, core_1.ElementRef])
    ], DropdownItem);
    return DropdownItem;
}());
exports.DropdownItem = DropdownItem;
